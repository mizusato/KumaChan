import service from './service';

type EchoServer {
    verbose: Bool
};

export function new-echo-server:
    &() => service::Constructor
    &() => &(opts,_) =>
        let { verbose } := opts,
        { yield { service::create { EchoServer { verbose } } } };

export function delete:
    &(EchoServer) => Action
    &(_) => { yield () };

export function echo:
    &(EchoServer,service::Request) => Action[service::Response,Error]
    &(server,req) =>
        let {content} := req,
        let {verbose} := server,
        if verbose:
            { yield { service::Response {
                content: { "Reply: #" content }
            } } },
        else:
            { yield { service::Response { content } } };

do
    { serve {
        service: service::Identifier,
        backend: { ServerCleartext { network: 'tcp', addr: '127.0.0.1:8001' } },
        options: {},
        constructor: new-echo-server
    } }
    . { crash-on-error };
