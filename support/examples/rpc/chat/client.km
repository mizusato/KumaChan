import service from './service';

export function consume-chat:
    &() => service::Consumer
    &() => &(chat) =>
        { println 'connected' }
            . { then chat.{ messages () } }
            . { concat-map &(msg) =>
                { println { "#: #" (msg.from, msg.content.text) } } }
            . { wait-complete }
            . { crash-on-error }
            . { with
                let read-and-send :=
                    | text := await scanln,
                    | await chat.{ say { service::MessageContent { text } } },
                    { yield () },
                read-and-send.{forever}.{crash-on-error} };

do
    let try :=
        | await { print '(login) nickname: ' },
        | nickname := await scanln,
        { access {
            service: service::Identifier,
            backend: { ClientCleartext { network: 'tcp', addr: '127.0.0.1:8002' } },
            options: {},
            argument: { service::Argument { service::Login { nickname } } },
            consumer: consume-chat
        } },
    try.{crash-on-error};
