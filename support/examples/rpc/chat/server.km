import service from './service';


type Chat {
    user: User,
    bus:  Bus[service::Message]
};
type User {
    name: String
};

export function new-chat:
    &(Bus[service::Message]) => service::constructor
    &(msg-bus) => &(login,_) =>
        &(id) := await gen-sequential-id,
        let { nickname } := login,
        let unique-name := { "#-#" (id, nickname) },
        & await { println { "# signed in" unique-name } },
        let chat := { Chat { bus: msg-bus, user: { name: unique-name } } },
        let instance := { service::create chat },
        { yield instance };

export function say:
    &(Chat,service::MessageContent) => Action[service::None,Error]
    &(chat,content) =>
        let msg := { service::Message {
            from: chat.user.name,
            content
        } },
        & await (chat.bus <- msg),
        { yield service::None };

export function messages:
    &(Chat,service::None) => Action*[service::Message,Error]
    &(chat,_) =>
        {watch chat.bus};

do
    & msg-bus := bus::[service::Message] (),
    { rpc::serve {
        service: service::identifier,
        backend: { rpc::server-cleartext { network: 'tcp', addr: '127.0.0.1:8002' } },
        options: {},
        constructor: { new-chat msg-bus }
    } }
    . { catch-crash };
