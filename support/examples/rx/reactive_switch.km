import window from '../ui/web/window';

do { window::mount Root };

type Value enum {
     type Double (String,String);
     type Single { content: String };
};

const Root: ui::Component :=
    | v := use { State { Single { content: 'a value' } } },
    let editor: ui::Component :=
        switch v:
        case Double (x, y):
            { Container [
                { Input x },
                { Input y }
            ] },
        case Single {content}:
            { Input content },
        end,
    { { StyledContainer ['container'] } [
        editor,
        { Button ('init double', (v <- { Double ('a', 'b') })) },
        { Button ('init single', (v <- { Single { content: 'foo' } })) },
        | v := switch-map { watch v },
            switch v:
            case Double (x, y):
                { Label { "[Double] (#, #)" (x, y) } },
            case Single {content}:
                { Label { "[Single] #" content } },
            end
    ] };
