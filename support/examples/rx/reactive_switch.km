import assets from './assets';

type Value union {
     type Double (String,String);
     type Single { content: String };
};

do ui-init 'Reactive Switch' Root;

do ui-inject-css [assets::style-css];

do ui-exit-when-window-closed;

private const Root: UI::Component
    ~ with-reactive* &(v) := Single { content: 'a value' },
    let editor: UI::Component :=
        switch v:
        case Double (x, y):
            ui-container [
                ui-text-input x,
                ui-text-input y
            ],
        case Single {content}:
            ui-text-input content,
        end,
    ui-container [
        editor,
        ui-button 'init double' $(v <- (Double 'a' 'b')),
        ui-button 'init single' $(v <- (Single { content: 'foo' })),
        ~ switch-map &(v) := watch v,
            switch v:
            case Double (x, y):
                ui-label ("[Double] (#, #)" x y),
            case Single {content}:
                ui-label ("[Single] #" content),
            end
    ];
