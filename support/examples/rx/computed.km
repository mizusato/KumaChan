import window from '../ui/web/window';

do { window::mount Root };

function FloatInput:
    &(Reactive[Maybe[Float]]) => ui::Component
    &(value) =>
        & buffer := use { State '' },
        { Input buffer }
            . { with (buffer connect &(string) =>
                (value <- { parse-float string })) };

const Root: ui::Component :=
    let container := { StyledContainer ['container'] },
    let row := { StyledContainer ['row'] },
    & price := use { State { Just 0.0 } },
    & quantity := use { State { Just 0.0 } },
    let total :=
        & (price?, quantity?) := computed (price.{watch}, quantity.{watch}),
        & price := maybe? price?,
        & quantity := maybe? quantity?,
        { Just (price * quantity) },
    { container [
        { row [ { Label 'Price:' }, { FloatInput price } ] },
        { row [ { Label 'Quantity:' }, { FloatInput quantity } ] },
        { Label
            & total? := map total,
            switch total?:
            case Just total:
                { "Total = #" total.{str} },
            case Null:
                'invalid input',
            end
        }
    ] };
