import window from '../ui/web/window';

do { window::mount Root };

const Root: ui::Component :=
    | (text, undo, redo, diff) := use { StateAutoSnapshot '' },
    { { StyledContainer ['container'] } [
        | editing := use { State No },
        | state := switch-map editing.{watch}.{with-latest-from(text)},
        let (is-editing, current-text) := state,
        if is-editing:
            | buffer := use { State current-text },
            { Container [
                { Input buffer },
                | new-text := switch-map { watch buffer },
                    { Button ('Confirm', (
                        (editing <- No) then
                        (text <- new-text)
                    )) }
            ] },
        else:
            { { StyledContainer ['row'] } [
                ({ Label { watch text } } with { Style ['red'] }),
                { Button ('Edit', (editing <- Yes)) }
            ] },
        | (snapshots, current) := switch-map diff,
        let { undo-stack, redo-stack } := snapshots,
        let undo-stack := undo-stack.{collect},
        let redo-stack := redo-stack.{collect},
        let title := (Label.[&(String) => ui::Component] with { Style ['title'] }),
        { Container [
            if ((undo-stack.{length}) > 0):
                { Button ('Undo', undo) },
            else:
                Empty,
            if ((redo-stack.{length}) > 0):
                { Button ('Redo', redo) },
            else:
                Empty,
            { title 'undo stack (reversed):' },
                { Container ({ reverse undo-stack } map &(v) =>
                    { Label { quote v } }) },
            { title 'current:' },
                { Label { quote current } },
            { title 'redo stack:' },
                { Container (redo-stack map &(v) =>
                    { Label { quote v } }) }
        ] }
    ] };
