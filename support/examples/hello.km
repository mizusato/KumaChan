do println 'Hello World'
    // | then   (println "# # #" (
    //     OS::Name, OS::Arch, (if OS::Is64Bit: '64bit', else: '32bit')))
    | then   (println 'timer')
    | then   (wait { timeout: 2000 })
    | then   (println (str (exp (log (complex 5.0 5.0)))))
    | then   (println ($(2.0 * (complex 0.0 1.0)).sqrt.asin.sin.str))
    | then   (println ($(2.0 * (complex 0.0 1.0)).sqrt.acos.cos.str))
    | then   (println ($(2.0 * (complex 0.0 1.0)).sqrt.atan.tan.str))
    | then   (println (str $(20 ** 11)))
    | then   (println (str (factorial 20)))
    | then   (println 'merge (0..5)')
    | then   (yield* (seq { from: 0, to: 5 })
                | merge-map (&(i)(println (str i)))
                | wait-complete )
    | then   (println 'ticker')
    | then   (tick { interval: 1000 }
                | scan        (:Number: 0) (&(n, _)(+ 1 n))
                | concat-map  (&(n)(println (str n)))
                | wait-complete )  // TODO: cancel
    | catch  (&(_)(exit 1));

function factorial: (&(Int)(Int))
    ( &(n)
        if $(n <= 1):
            1,
        else:
            $(n * (factorial $(n - 1)))
    );
