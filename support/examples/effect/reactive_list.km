import assets from './assets';

type Todo {
    id:       String,
    content:  String,
    finished: Bool
};


do ui-init 'Reactive List' Root;

do ui-inject-css [assets::style-css];

do ui-exit-when-window-closed;

private const Root: UI::Component
    let center := styled ui-container ['center'],
    let row := styled ui-container ['row'],
    ~ with-reactive* &(list) := new-list:[Todo] [] ( &{id} (ListKey id) ),
    center [
        ~ with-reactive* &(buffer) := '',
        row [
            buffer.ui-text-input,
            buffer.watch.switch-map( &(content)
                ui-button 'Add' (
                    proc-gid.then ( &(id) list.update( &(list)
                        list.append (id, (Todo { id, content, finished: No })
                    ))).then $(buffer <- '')
                ))
        ],
        ~ use &(item) := ui-list list,
        let { id, content, finished } := item,
        row [
            ui-checkbox finished,
            ui-text-input content,
            ~ switch-map &(id) := id.watch,
            // TODO: enable/disable up/down button accroding to item position
            row [
                ui-button 'Up'     (list.update(&(list)(list.move-up id))),
                ui-button 'Down'   (list.update(&(list)(list.move-down id))),
                ui-button 'Remove' (list.update(&(list)(list.delete id)))
            ]
        ]
    ];
