import assets from './assets';

do ui-init 'Reactive Snapshot' Root;

do ui-inject-css [assets::style-css];

do UI::ExitWhenWindowClosed;

private const Root: UI::Component
    ~ with-auto-snapshot* &(text, ops) := '',
    let (text-undo, text-redo, text-diff) := ops,
    ui-container [
        ~ with-reactive* &(editing) := No,
        ~ switch-map &(state) := editing.watch.with-latest-from(text),
        let (is-editing, current-text) := state,
        if is-editing:
            ~ with-reactive* &(buffer) := current-text,
            ui-container [
                (ui-text-input buffer),
                ~ switch-map &(new-text) := watch buffer,
                    ui-button 'Confirm' (
                        $(editing <- No).then
                        $(text <- new-text)
                    )
            ],
        else:
            (ui-container.styled ['row']) [
                ui-text (text.watch)
                    | with (ui-style ['red']),
                ui-button 'Edit' $(editing <- Yes)
            ],
        ~ switch-map &(snapshots, current) := text-diff,
        let { undo, redo } := snapshots,
        let undo := undo.collect,
        let redo := redo.collect,
        let title := styled ui-label ['title'],
        ui-container [
            if $((undo.length) > 0):
                ui-button 'Undo' text-undo,
            else:
                ui-empty,
            if $((redo.length) > 0):
                ui-button 'Redo' text-redo,
            else:
                ui-empty,
            title 'undo stack (reversed):',
                ui-container (reverse (undo.map ( &(v)
                    ui-label (quote v)))),
            title 'current:',
                ui-label (quote current),
            title 'redo stack:',
                ui-container (redo.map (&(v)
                    ui-label (quote v)))
        ]
    ];
