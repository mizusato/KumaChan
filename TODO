TODO

- move parser package to lang/

- revise lambda syntax and pipeline dot syntax

- UI: Web(main) + Native(supplement)

- integrate WebUi with Qt Designer (promoted QWidget -> UiView)

- merge Qt module into UI

- restore ui xml loader (add widget-specific bind function)

- support: menu, toolbar, popupmenu, modal dialog

--------------

New Syntax Draft

expr = term ( . { term term? } | . name | . [ type ] )*
call = { term term } | ( term term term )

struct.field
value.[Cast]
input.{ pipeline arg }

remove `use` (Action*)

assign integer literal to float

"string #{interpolation}" --> & { interpolation: impl(Str) } => native

"#{0} #{1}"

&(x:Int):Int => (x + 1)

public -> export, specify type in pattern

export function > :
    [T] (Ord[T])
    &(a:T, b:T): Bool => (b < a);

const x: Int := 1;

module name lowercase

{ ui::button action }.{ with { ui::style ['big'] } }

\u0020
\(LF)
\å¤§

& await name := scanln,
& await { println { "Hello #{0}" name } }
& { exit 0 }

& maybe? x := x?,
& maybe? y := y?,
{ Just (x + y) }

