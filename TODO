TODO

## Refinement

- Rx: combine-latest 1 update per tick (?)

- VM: constant thunk

- GUI: qtbinding C side int vs. go side int (not the same type, fix it)

- API: consider renaming wait and tick

- API: liftA2 on Async[T]

- GUI: setAttributeNS() for SVG elements

- Compiler: revise FuncInfo.SourceMap (try to reduce space usage)


## Type System Refactor

- Lang: consider { instance.method arg }, type A (I1, I2) { ... };

- Lang: consider curried function as method: &(Instance) => &(In) => Out

- Lang: consider curried input as implicit input: &(Ord[T]) => &(T,T) => Bool

- Lang: separate interface/implicit

type I (Base1,Base2) interface { method: &(A) => B }

type Op= [T] &(T,T) => Bool;

type Op< [T] &(T,T) => Bool;

export function > :
    [T] { <: Op<[T] }
    &(T, T) => Bool
    &(a, b) => (b < a);

|None|
|Some| 1 : Maybe[Integer]
|exact:Some| 1 : Some[Integer]
|Success| 1
{ |Point| (x, y) }
| .&x |
||

\ x := await foo,
bar

type type[T] protected Type;
type Type native;
type value[T] protected Value;
type Value native;
|reflect::type[Foo]|
|reflect::value| "abc"
// type assertion etc. implemented by (native) functions

- Lang: type check: (expected, ast-node, inferred) => Result[(expr, new-inferred)]

- Lang: bounds should only allow certain types (cannot include parameters)

- Lang: type/function alias Name = ref (just a name resolution interceptor)

- Lang: permit anonymous record expression (currently requires explicit type)

- Lang: fix the order randomness of field assignment of anonymous record input

- Lang: bidirectional type inference

- Lang: revise overloading rule (consider introducing input-based precedence)


## API Refactor

- API: categorize API functions according to usage, corresponding types, ...

- API: better native function names

- API: separate string APIs from `api/container.go` and `lib/container/string.go`

- API: to be semantic: tuple input --> record input

- API: revise Reactive[FlexList[T]] methods, consider methods for Reactive[Map[K,V]]

- API: revise resource management of files, ... (consider Disposable[T] monad)


## GUI Enhancement

- API: type Provider[T,A] (Computed[T], Sink[A]);

- GUI: crash report window

- GUI: support: menu, toolbar, popupmenu, modal dialog


