TODO

** Reactive[Struct] refactor plan (generalized projection)
type FieldRef[S,F] (Maybe[F] => (S, F));  // or ProjRef[S,F]
e.g. project: &(Reactive[S], S => FieldRef[S,F]) => Reactive[F]
e.g. project: &(Maybe[S], S => FieldRef[S,F]) => FieldRef[Maybe[S],Maybe[F]]
--> &(Reactive[Maybe[S]]) => Reactive[Maybe[F]]
--> &(Reactive[V[S]]) => Reactive[V[F]] (V = ValidationState)
syntax 1: struct .& field => FieldRef[structType,fieldType]
syntax 2: (struct: FieldRef[parent,struct]) .& field => FieldRef[parent,fieldType]
(no special "."/switch syntax for Reactive)

- Rx: RefEqual apply on Watch() (+DistinctUntilChanged) instead of Emit()/Update()

- Lang: consider prefix for special identifier used by compiler (e.g. @DefaultValue)

- Lang: permit anonymous record expression (currently requires explicit type)

- KMD: migrate to new numeric types, add other primitives

- Type: enum supertype: enum { ...Another, type Added; }

- KMD: data-validate only for protected/opaque types

- KMD: automatic validator call when boxing a value

- Data: should all value be pointer/primitive? (aka no non-primitive value type)

- Lang: Path/To/Function as namespace?

- API: revise Reactive[FlexList[T]] methods, consider methods for Reactive[Map[K,V]]

- API: to be semantic: tuple input --> record input

- API: revise resource management of files, ... (consider Disposable[T] monad)

- API: categorize API functions according to usage, corresponding types, ...

- API: separate string APIs from `api/container.go` and `lib/container/string.go`

- GUI: qtbinding C side int vs. go side int (not the same type, fix it)

- GUI: setAttributeNS() for SVG elements

- GUI: crash report window

- GUI: support: menu, toolbar, popupmenu, modal dialog

