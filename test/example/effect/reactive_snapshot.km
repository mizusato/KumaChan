import UI from 'rename:WebQuick';
import assets from './assets';

do webui-init 'Reactive Snapshot' DOM;

do webui-inject-css [assets::style-css];

do WebUi::ExitWhenWindowClosed;

private const DOM: NoExcept*[WebUi::Node]
    ~ with-auto-snapshot* &(text, ops) := '',
    let (text-undo, text-redo, text-diff) := ops,
    UI::Container [
        ~ with-reactive* &(editing) := No,
        ~ switch-map &(state) := editing.watch.with-latest-from(text),
        let (is-editing, current-text) := state,
        if is-editing:
            ~ with-reactive* &(buffer) := current-text,
            UI::Container [
                (UI::TextInput buffer),
                ~ switch-map &(new-text) := watch buffer,
                    UI::Button 'Confirm' (
                        $(editing <- No).then
                        $(text <- new-text)
                    )
            ],
        else:
            UI::Styled ['row'] (UI::Container [
                UI::Styled ['red']
                    (UI::TextWatch (text.watch)),
                UI::Button 'Edit' $(editing <- Yes)
            ]),
        ~ switch-map &(snapshots, current) := text-diff,
        let { undo, redo } := snapshots,
        let undo := undo.collect,
        let redo := redo.collect,
        UI::Container [
            if $((undo.length) > 0):
                UI::Button 'Undo' text-undo,
            else:
                UI::Empty,
            if $((redo.length) > 0):
                UI::Button 'Redo' text-redo,
            else:
                UI::Empty,
            UI::Styled ['title'] (UI::Text 'undo stack (reversed):'),
            UI::Container (reverse (undo.map (&(v)(UI::Text (quote v))))),
            UI::Styled ['title'] (UI::Text 'current:'),
            UI::Text (quote current),
            UI::Styled ['title'] (UI::Text 'redo stack:'),
            UI::Container (redo.map (&(v)(UI::Text (quote v))))
        ]
    ];
