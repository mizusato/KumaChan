type Vector {
      x: Integer,
      y: Integer
};

type Matrix {
     start: Vector,
     size: Vector
};

function String: &(Vector) => String
         & {x,y} => { "(#,#)" (x.{String}, y.{String}) };

function String: &(Matrix) => String
         & {start,size} => { "[#,#]" (start.{String}, size.{String}) };

do
        let p := { Vector { x: 1, y: 2 } },
        let (_,q1) := { p.&x None },
        let (q2,_) := { p.&x { Some 3 } },
        let (q3,_) := { p.&y { Some -9 } },
        let u := { Matrix { start:p, size: q2 } },
        let (_,v1) := { u.&start.&x None },
        let (v2,_) := { u.&start.&y { Some 4 } },
        let (v3,_) := { u.&size.&x { Some 5 } },
        let str := [
            p.{String},
            q1.{String},
            q2.{String},
            q3.{String},
            v1.{String},
            v2.{String},
            v3.{String}
        ].{join ''..\n},
        { println str }
        . { crash-on-error };

