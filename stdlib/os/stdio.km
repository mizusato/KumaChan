public const  Stdin: FileReadOnly
    native 'OS::Stdin';
public const Stdout: FileWriteOnly
    native 'OS::Stdout';
public const Stderr: FileWriteOnly
    native 'OS::Stderr';

public function scan:  (&()(Effect[String,I/O::Error]))
    ( &(_)
        let read := OS::Stdin | read-string,
        if $(OS::Kind = 'windows'):
            read | map (&(str)(str.trim-suffix ''..\r)),
        else:
            read
    );
public function print: (&(String)(Effect[-,I/O::Error]))
    (&(line)(OS::Stdout | write-string line));
public function error: (&(String)(Effect[-,I/O::Error]))
    (&(line)(OS::Stderr | write-string line));

public function scanln:  (&()(Effect[String,I/O::Error]))
    ( &(_)
        let read := OS::Stdin | read-line,
        if $(OS::Kind = 'windows'):
            read | map (&(str)(str.trim-suffix ''..\r)),
        else:
            read
    );
public function println: (&(String)(Effect[-,I/O::Error]))
    (&(line)(OS::Stdout | write-line line));
public function errorln: (&(String)(Effect[-,I/O::Error]))
    (&(line)(OS::Stderr | write-line line));
