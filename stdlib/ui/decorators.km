type Decorator
    &(Component) => Component;

export function with:
    &(Component,Decorator) => Component
    &(cpt,f) => { f(cpt) };

export function with:[T]
    &((&(T) => Component), Decorator) => (&(T) => Component)
    &(ctor,f) => (&(arg) => { f { ctor(arg) } });

export function styled:[T]
    &((&(T) => Component), Array[String]) => (&(T) => Component)
    &(ctor, class-list) => (ctor with { ui-style class-list });

export function ui-render-if:
    &(Computed[Bool]) => Decorator
    &(@render) => &(cpt) =>
        & render := switch-map @render,
        if render:
            cpt,
        else:
            ui-empty;

export function ui-show-if:
    &(Computed[Bool]) => Decorator
    &(@show) => &(@node) =>
        & (node, show) := computed (@node, @show),
        if show:
            node,
        else:
            (node with { dom-styles [('display','none')] });

export function ui-style:
    &(Array[String]) => Decorator
    &(class-list) => &(@node) =>
        let class := (class-list join ' '),
        (@node map &(node) => (node with { dom-attrs [('class',class)] }));

export function ui-style:
    &(Computed[Array[String]]) => Decorator
    &(@class-list) => &(@node) =>
        & (class-list, node) := computed (@class-list, @node),
        let class := (class-list join ' '),
        (node with { dom-attrs [('class',class)] });

export function ui-attrs:
    &(Array[(String,String)]) => Decorator
    &(attrs) => &(@node) =>
        & node := map @node,
        (node with { dom-attrs attrs });

export function ui-attrs:
    &(Computed[Array[(String,String)]]) => Decorator
    &(@attrs) => &(@node) =>
        & (attrs, node) := computed (@attrs, @node),
        (node with { dom-attrs attrs });

export function ui-inline-style:
    &(Array[(String,String)]) => Decorator
    &(rules) => &(@node) =>
        & node := map @node,
        (node with { dom-styles rules });

export function ui-inline-style:
    &(Computed[Array[(String,String)]]) => Decorator
    &(@rules) => &(@node) =>
        & (rules, node) := computed (@rules, @node),
        (node with { dom-styles rules });

export function ui-event:
    &(String,EventHandler) => Decorator
    &(name,handler) => &(@node) =>
        & node := map @node,
        (node with { dom-event (name,handler) });

export function ui-focusable:
    &() => Decorator
    &() => &(@node) =>
        & node := map @node,
        (node with { dom-attrs [('tabindex','0')] });

export function ui-autofocus:
    &() => Decorator
    &() => &(@node) =>
        & node := map @node,
        (node with { dom-attrs [('webuiAutofocus','webuiAutofocus')] });

export function ui-enabled:
    &(Computed[Bool]) => Decorator
    &(@enabled) => &(@node) =>
        & (enabled, node) := computed (@enabled, @node),
        if enabled:
            node,
        else:
            (node with { dom-attrs [('disabled', 'disabled')] });

