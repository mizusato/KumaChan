type Decorator (&(Component)(Component));

public function with: ( &(Component,Decorator) Component )
    ( &(cpt,f)
        f cpt
    );
public function with[T]: ( &((&(T)(Component)),Decorator) (&(T)(Component)) )
    ( &(ctor,f)
    ( &(opts)
        f (ctor opts)
    ));
public function styled[T]: ( &((&(T)(Component)),Array[String]) (&(T)(Component)) )
    ( &(ctor,class-list)
        ctor | with (ui-style class-list)
    );

public function ui-render-if: ( &(Action*[Bool]) Decorator )
    ( &(@render)
    ( &(cpt)
        ~ switch-map &(render) := @render,
        if render:
            cpt,
        else:
            ui-empty
    ));
public function ui-show-if: ( &(Action*[Bool]) Decorator )
    ( &(@show)
    ( &(cpt)
        ~ map &(node,show) := (combine-latest* cpt @show),
        if show:
            node,
        else:
            node.with (dom-styles [
                ('display', 'none')
            ])
    ));
public function ui-style: ( &(Array[String]) Decorator )
    ( &(class-list)
    ( &(cpt)
        ~ map &(node) := cpt,
        node.with (dom-attrs [
            ('class', (class-list.join ' '))
        ])
    ));
public function ui-style: ( &(Action*[Array[String]]) Decorator )
    ( &(@class-list)
    ( &(cpt)
        ~ map &(class-list, node) := (combine-latest* @class-list cpt),
        node.with (dom-attrs [
            ('class', (class-list.join ' '))
        ])
    ));
public function ui-attrs: ( &(Array[(String,String)]) Decorator )
    ( &(attrs)
    ( &(cpt)
        ~ map &(node) := cpt,
        node.with (dom-attrs attrs)
    ));
public function ui-attrs: ( &(Action*[Array[(String,String)]]) Decorator )
    ( &(@attrs)
    ( &(cpt)
        ~ map &(attrs, node) := (combine-latest* @attrs cpt),
        node.with (dom-attrs attrs)
    ));
public function ui-inline-style: ( &(Array[(String,String)]) Decorator )
    ( &(rules)
    ( &(cpt)
        ~ map &(node) := cpt,
        node.with (dom-styles rules)
    ));
public function ui-inline-style: ( &(Action*[Array[(String,String)]]) Decorator )
    ( &(@rules)
    ( &(cpt)
        ~ map &(rules, node) := (combine-latest* @rules cpt),
        node.with (dom-styles rules)
    ));
public function ui-event: ( &(String,EventHandler) Decorator )
    ( &(event)
    ( &(cpt)
        let (name,handler) := event,
        ~ map &(node) := cpt,
        node.with (dom-event name handler)
    ));
public function ui-focusable: ( &() Decorator )
    ( &()
    ( &(cpt)
        ~ map &(node) := cpt,
        node.with (dom-attrs [('tabindex','0')])
    ));
public function ui-autofocus: ( &() Decorator )
    ( &()
    ( &(cpt)
        ~ map &(node) := cpt,
        node.with (dom-attrs [('webuiAutofocus','webuiAutofocus')])
    ));
public function ui-enabled: ( &(Action*[Bool]) Decorator )
    ( &(@enabled)
    ( &(cpt)
        ~ map &(enabled, node) := (combine-latest* @enabled cpt),
        if enabled:
            node,
        else:
            node.with (dom-attrs [('disabled', 'disabled')])
    ));
