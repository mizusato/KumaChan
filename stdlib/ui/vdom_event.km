type EventOptions native;  // *vdom.EventOptions
type EventPayload native;  // *qt.WebUiEventPayload (contains a C++ pointer)
// TODO: consider renaming EventSink and related types
type EventSink    protected Sink[EventPayload];

private function dom-event-sink[T]: ( &(Sink[T],(&(EventPayload)(T))) EventSink )
    native 'ui-dom-event-sink';
private function dom-event-sink[T]: ( &(Reactive[T],(&(T)(&(EventPayload)(T)))) EventSink )
    native 'ui-dom-event-sink-reactive';

private function getter-callback[T]:
    ( &(String,(&(EventPayload,String)(T)),(&(T)(Callback))) Callback )
    ( &(prop,getter,k)
        Callback ( &(ev)
            let next := (k (ev.getter(prop))),
            next ev
        )
    );

private function get-string: ( &(EventPayload,String) String )
    native 'ui-event-payload-get-string';
private function get-float: ( &(EventPayload,String) Float )
    native 'ui-event-payload-get-float';
private function get-number: ( &(EventPayload,String) Number )
    native 'ui-event-payload-get-number';
private function get-bool: ( &(EventPayload,String) Bool )
    native 'ui-event-payload-get-bool';

private function dom-event:
    ( & { prevent: Bool, stop: Bool, capture: Bool, sink: EventSink } EventOptions )
    native 'ui-dom-event';
private function dom-event: ( &(EventSink) EventOptions )
    ( &(sink)
        dom-event { prevent: No, stop: No, capture: No, sink }
    );
private function dom-event: ( &(String,EventSink) Events )
    ( &(name,sink)
        dom-events [ (name, (dom-event {
            sink,
            prevent: No, stop: No, capture: No
        })) ]
    );
