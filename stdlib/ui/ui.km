type MainLoop protected NoExcept[-];
type WebAsset native;
type FontInfo (String,String,String);  // family, weight, style

public function ui-init: ( &(String,NoExcept*[Node]) MainLoop )
    native 'ui-init';
public function ui-inject-css: ( &(Array[WebAsset]) NoExcept[-] )
    native 'ui-inject-css';
public function ui-inject-js:  ( &(Array[WebAsset]) NoExcept[-] )
    native 'ui-inject-js';
public function ui-inject-ttf: ( &(Array[(FontInfo,WebAsset)]) NoExcept[-] )
    native 'ui-inject-ttf';
public function ui-get-window: ( &() NoExcept[MainWindow] )
    (&(_)(GetWindow));
private const GetWindow: NoExcept[MainWindow]
    native 'UI::GetWindow';
public const ExitWhenWindowClosed: NoExcept[-]
    ~ then &(window) := GetWindow,
    listen (window.closed) (&(_)(exit 0));


type Callback     protected (&(EventPayload)(NoExcept[-]));

public function ui-callback: ( &(Callback) EventSink )
    ( &(cb)
        dom-event-sink (callback:[NoExcept[-]] (& e e)) cb
        // important: payload will be deleted after `cb` called
    );
public function ui-string: ( &(String,(&(String)(Callback))) Callback )
    ( &(prop,k)
        getter-callback prop get-string k
    );
public function ui-float:  ( &(String,(&(Float)(Callback))) Callback )
    ( &(prop,k)
        getter-callback prop get-float k
    );
public function ui-number: ( &(String,(&(Number)(Callback))) Callback )
    ( &(prop,k)
        getter-callback prop get-number k
    );
public function ui-bool:   ( &(String,(&(Bool)(Callback))) Callback )
    ( &(prop,k)
        getter-callback prop get-bool k
    );
public function return: ( &(NoExcept[-]) Callback )
    ( &(action)
        Callback (&(_)(action))
    );


type Component[Options]
    ( &(Options) NoExcept*[Node] );

type Decorator[Options]
    ( &(Options,NoExcept*[Node]) NoExcept*[Node] );

public const Empty: NoExcept*[Node]
    (yield ()).then(&(_)(yield (dom-node 'div' [('display','none')] [])));
    // note: create a new node each time (a node cannot be used more than once)

public const Container: Component[Array[NoExcept*[Node]]]
    (&(items)(dom-dynamic 'div' items));

public const List: Component[NoExcept*[Array[Node]]]
    (&(items)(dom-dynamic 'div' items));

public const Text: Component[String]
    (&(text)(yield (dom-node 'div' text)));

public const TextSpace: Component[String]
    (&(text)(yield (dom-node 'div' [('visibility','hidden')] text)));

public const TextWatch: Component[NoExcept*[String]]
    ( &(@text)
        ~ map* &(text) := @text,
        dom-node 'div' text
    );

public const TextInput: Component[Reactive[String]]
    ( &(@text)
        ~ map* &(text) := watch @text,
        dom-node 'input'
            (dom-styles [])
            (dom-attrs [ ('type', 'text'), ('value', text) ])
            (dom-event 'input'
                (dom-event-sink @text (&(ev)(ev.get-string 'webuiValue'))))
            (dom-children [])
    );

public const Checkbox: Component[Reactive[Bool]]
    ( &(@checked)
        ~ map* &(checked) := watch @checked,
        dom-node 'input'
            (dom-styles [])
            (dom-attrs (
                if checked:
                    ([('type', 'checkbox'), ('checked', 'checked')]),
                else:
                    ([('type', 'checkbox')])
            ))
            (dom-event 'change'
                (dom-event-sink @checked (&(ev)(ev.get-bool 'webuiChecked'))))
            (dom-children [])
    );

public const Select: Component[(Reactive[String], Array[(String,String)])]
    ( &(@current, options)
        ~ map* &(current) := watch @current,
        dom-node 'select'
            (dom-styles [])
            (dom-attrs [('value', current)])
            (dom-event 'change'
                (dom-event-sink @current (&(ev)(ev.get-string 'webuiValue'))))
            (dom-children (
                ~ map &(name,desc) := options,
                dom-node 'option' desc
                    | with (dom-attrs [('value', name)])
            ))
    );

public const Button: Component[(String, NoExcept[-])]
    ( &(text, action)
        yield (dom-node 'button'
            (dom-styles [])
            (dom-attrs [])
            (dom-event 'click'
                (ui-callback (return action)))
            (dom-text text)
        )
    );


public const Styled: Decorator[Array[String]]
    ( &(class-list, @node)
        ~ map* &(node) := @node,
        node.with (dom-attrs [
            ('class', (class-list.join ' '))
        ])
    );

public const DynStyled: Decorator[NoExcept*[Array[String]]]
    ( &(@class-list, @node)
        ~ map* &(class-list, node) := (combine-latest! @class-list @node),
        node.with (dom-attrs [
            ('class', (class-list.join ' '))
        ])
    );

public const WithEvent: Decorator[(String,EventSink)]
    ( &(event, @node)
        let (name,sink) := event,
        ~ map* &(node) := @node,
        node.with (dom-event name sink)
    );

public const Focusable: Decorator[(String,EventSink)]
    ( &(event, @node)
        let (name,sink) := event,
        ~ map* &(node) := @node,
        let node := node.with (dom-event name sink),
        let node := node.with (dom-attrs [('tabindex','0')]),
        node
    );

public const DynEnabled: Decorator[NoExcept*[Bool]]
    ( &(@enabled, @node)
        ~ map* &(enabled, node) := (combine-latest! @enabled @node),
        if enabled:
            node,
        else:
            node.with (dom-attrs [('disabled', 'disabled')])
    );
