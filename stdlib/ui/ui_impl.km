type Node   native;  // *vdom.Node
type Styles native;  // *vdom.Styles
type Attrs  native;  // *vdom.Attrs
type Events native;  // *vdom.Events
type EventOptions  native;  // *vdom.EventOptions
type EventPayload  native;  // *qt.WebUiEventPayload (contains a C++ pointer)
type EventSink     protected Sink[EventPayload];
type NodeContent   native;  // vdom.NodeContent

public function zero-value: ( &() Styles )      native 'ui-dom-styles-zero';
public function zero-value: ( &() Attrs )       native 'ui-dom-attrs-zero';
public function zero-value: ( &() Events )      native 'ui-dom-events-zero';
public function zero-value: ( &() NodeContent ) native 'ui-dom-content-zero';


type MainLoop protected NoExcept[-];

type WebAsset native;

type FontInfo (String,String,String);  // family, weight, style

public function ui-init: ( &(String,NoExcept*[Node]) MainLoop )
    native 'ui-init';

public function ui-inject-css: ( &(Array[WebAsset]) NoExcept[-] )
    native 'ui-inject-css';

public function ui-inject-js:  ( &(Array[WebAsset]) NoExcept[-] )
    native 'ui-inject-js';

public function ui-inject-ttf: ( &(Array[(FontInfo,WebAsset)]) NoExcept[-] )
    native 'ui-inject-ttf';

public function ui-get-window: ( &() NoExcept[MainWindow] )
    (&(_)(GetWindow));

private const GetWindow: NoExcept[MainWindow]
    native 'UI::GetWindow';

public const ExitWhenWindowClosed: NoExcept[-]
    ~ then &(window) := GetWindow,
    listen (window.closed) (&(_)(exit 0));


public function dom-node: ( &(String,Styles,Attrs,Events,NodeContent) Node )
    native 'ui-dom-node';

public function dom-node:
    ( &(String, {
        styles:  Styles,
        attrs:   Attrs,
        events:  Events,
        content: NodeContent
    }) Node )
    ( &(tag, props)
        let {styles,attrs,events,content} := props,
        (dom-node tag styles attrs events content)
    );

public function dom-node: ( &(String,Array[(String,String)]) Node )
    ( &(tag, styles)
        dom-node tag
        { styles: (dom-styles styles) }
    );

public function dom-node: ( &(String,String) Node )
    ( &(tag, text)
        dom-node tag
        { content: (dom-text text) }
    );

public function dom-node: ( &(String,Array[Node]) Node )
    ( &(tag, children)
        dom-node tag
        { content: (dom-children children) }
    );

public function dom-node: ( &(String,Array[(String,String)],String) Node )
    ( &(tag, styles, text)
        dom-node tag
        { styles: (dom-styles styles), content: (dom-text text) }
    );

public function dom-node: ( &(String,Array[(String,String)],Array[Node]) Node )
    ( &(tag, styles, children)
        dom-node tag
        { styles: (dom-styles styles), content: (dom-children children) }
    );

public function dom-dynamic:
    ( &(String, NoExcept*[(Styles,Attrs,Events)], NoExcept*[Array[Node]])
        NoExcept*[Node] )
    ( &(tag, @opts, @children)
        ~ map* &(opts,children) := (combine-latest! @opts @children),
        let (styles,attrs,events) := opts,
        dom-node tag styles attrs events (dom-children children)
    );

public function dom-dynamic:
    ( &(String, NoExcept*[Array[Node]])
        NoExcept*[Node] )
    ( &(tag, @children)
        ~ map* &(children) := @children,
        dom-node tag { content: (dom-children children) }
    );

public function dom-dynamic:
    ( &(String, NoExcept*[(Styles,Attrs,Events)], Array[NoExcept*[Node]])
        NoExcept*[Node] )
    ( &(tag, @opts, children)
        dom-dynamic tag @opts (combine-latest! children)
    );

public function dom-dynamic:
    ( &(String, Styles, Attrs, Events, Array[NoExcept*[Node]])
        NoExcept*[Node] )
    ( &(tag, styles, attrs, events, children)
        dom-dynamic tag (yield styles attrs events) children
    );

public function dom-dynamic:
    ( &(String, Array[(String,String)], Array[NoExcept*[Node]])
        NoExcept*[Node] )
    ( &(tag, styles, children)
        dom-dynamic tag (dom-styles styles) (dom-attrs []) (dom-events []) children
    );

public function dom-dynamic:
    ( &(String, Array[NoExcept*[Node]])
        NoExcept*[Node] )
    ( &(tag, children)
        dom-dynamic tag (dom-styles []) (dom-attrs []) (dom-events []) children
    );

public function dom-styles: ( &(Map[String,String]) Styles )
    native 'ui-dom-styles';

public function dom-styles: ( &(Array[(String,String)]) Styles )
    (&(styles)(dom-styles (new-map styles)));

public function dom-styles-merge: ( &(Array[Styles]) Styles )
    native 'ui-dom-styles-merge';

public function dom-node-with-styles: ( &(Node,Styles) Node )
    native 'ui-dom-node-with-styles';


public function dom-attrs: ( &(Map[String,String]) Attrs )
    native 'ui-dom-attrs';

public function dom-attrs: ( &(Array[(String,String)]) Attrs )
    (&(attrs)(dom-attrs (new-map attrs)));

public function dom-attrs-merge: ( &(Array[Attrs]) Attrs )
    native 'ui-dom-attrs-merge';

public function dom-node-with-attrs: ( &(Node,Attrs) Node )
    native 'ui-dom-node-with-attrs';


public function dom-events: ( &(Map[String,EventOptions]) Events )
    native 'ui-dom-events';

public function dom-events: ( &(Array[(String,EventOptions)]) Events )
    (&(events)(dom-events (new-map events)));

public function dom-event: ( &(String,EventSink) Events )
    ( &(name,sink)
        dom-events [ (name, (dom-event {
            sink,
            prevent: No, stop: No, capture: No
        })) ]
    );

public function dom-event:
    ( & { prevent: Bool, stop: Bool, capture: Bool, sink: EventSink } EventOptions )
    native 'ui-dom-event';

public function dom-event: ( &(EventSink) EventOptions )
    (&(sink)(dom-event { prevent: No, stop: No, capture: No, sink }));

public function dom-event-sink[T]: ( &(Sink[T],(&(EventPayload)(T))) EventSink )
    native 'ui-dom-event-sink';

public function dom-event-sink[T]: ( &(Reactive[T],(&(T)(&(EventPayload)(T)))) EventSink )
    native 'ui-dom-event-sink-reactive';

public function dom-callback: ( &((&(EventPayload)(NoExcept[-]))) EventSink )
    (&(cb)(dom-event-sink (callback:[NoExcept[-]] (& e e)) cb));
    // important: payload will be deleted after `cb` called

public function dom-events-merge: ( &(Array[Events]) Events )
    native 'ui-dom-events-merge';

public function dom-node-with-events: ( &(Node,Events) Node )
    native 'ui-dom-node-with-events';


public function dom-text: ( &(String) NodeContent )
    native 'ui-dom-text';

public function dom-children: ( &(Array[Node]) NodeContent )
    native 'ui-dom-children';


public function get-string: ( &(EventPayload,String) String )
    native 'ui-event-payload-get-string';

public function get-float: ( &(EventPayload,String) Float )
    native 'ui-event-payload-get-float';

public function get-number: ( &(EventPayload,String) Number )
    native 'ui-event-payload-get-number';

public function get-bool: ( &(EventPayload,String) Bool )
    native 'ui-event-payload-get-bool';
