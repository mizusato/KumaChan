type Node        native;  // *vdom.Node
type Styles      native;  // *vdom.Styles
type Attrs       native;  // *vdom.Attrs
type Events      native;  // *vdom.Events
type NodeContent native;  // vdom.NodeContent

// TODO: type Tag String;


/// Be careful! This is technically NOT a pure function.
/// The vDOM driver in `webui.js` uses the memory address of a vNode as an ID.
/// Therefore, a vNode cannot be used more than once.
/// In addition, due to some restrictions, a vNode cannot move across subtrees.
///
function dom-node:
    &(String) => Node
    native 'ui-dom-node';

function dom-node:
    &(String,String) => Node
    &(tag, text) =>
        { dom-node tag }
            . { with { dom-text text } };

function dom-node:
    &(String,Array[Node]) => Node
    &(tag, children) =>
        { dom-node tag }
            . { with { dom-children children } };

function dom-dynamic:
    &(String, Computed[Array[Node]]) => Computed[Node]
    &(tag, @children) =>
        (@children map &(children) => { dom-node (tag, children) });

function dom-dynamic:
    &(String, Array[Computed[Node]]) => Computed[Node]
    &(tag, sources) =>
        { dom-dynamic (tag, {combine(sources)}) };


function dom-styles:
    &(Map[String,String]) => Styles
    native 'ui-dom-styles';

function dom-styles:
    &(Array[(String,String)]) => Styles
    &(styles) => { dom-styles { create-map styles } };

function with:
    &(Node, Styles) => Node
    native 'ui-with-styles';


function dom-attrs:
    &(Map[String,String]) => Attrs
    native 'ui-dom-attrs';

function dom-attrs:
    &(Array[(String,String)]) => Attrs
    &(attrs) => { dom-attrs { create-map attrs } };

function with:
    &(Node, Attrs) => Node
    native 'ui-with-attrs';


function dom-events:
    &(Map[String,EventHandler]) => Events
    native 'ui-dom-events';

function dom-events:
    &(Array[(String,EventHandler)]) => Events
    &(events) => { dom-events  { create-map events } };

function with:
    &(Node, Events) => Node
    native 'ui-with-events';


function dom-text:
    &(String) => NodeContent
    native 'ui-dom-text';

function dom-children:
    &(Array[Node]) => NodeContent
    native 'ui-dom-children';

function with:
    &(Node, NodeContent) => Node
    native 'ui-with-content';

