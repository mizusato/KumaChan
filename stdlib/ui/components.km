type Component Computed[Node];  // Observable<VNode>

function static-component:
    &(&() => Node) => Component
    native 'ui-static-component';

export function ui-empty:
    &() => Component
    &() => { static-component &() =>
        { dom-node 'div' }
            . { with { dom-styles [('display','none')] } } };

export function ui-element:
    &(String, Array[Component]) => Component
    &(tag, children) =>
        if ((children.{length}) = 0):
            { static-component &() => { dom-node tag } },
        else:
            { dom-dynamic (tag, children) };

export function ui-container:
    &(Array[Component]) => Component
    &(children) => { dom-dynamic ('div', children) };

export function ui-label:
    &(String) => Component
    &(text) => { static-component &() => { dom-node ('div', text) } };

export function ui-label-dynamic:
    &(Computed[String]) => Component
    &(@text) => { map (@text, (&(text) => { dom-node ('div', text) })) };

export function ui-input:
    &(Reactive[String]) => Component
    &(@text) =>
        let on-input := { dom-event-handler
            (@text, &(ev) => (ev get-string 'webuiValue')) },
        & text := map { watch @text },
        { dom-node 'input' }
            . { with { dom-attrs [('type','text'),('value',text)] } }
            . { with { dom-event ('input',on-input) } };

export function ui-checkbox:
    &(Reactive[Bool]) => Component
    &(@checked) =>
        let on-change := { dom-event-handler
            (@checked, &(ev) => (ev get-bool 'webuiChecked')) },
        & checked := map { watch @checked },
        { dom-node 'input' }
            . { with { dom-attrs
                if checked:
                    ([('type','checkbox'), ('checked','checked')]),
                else:
                    ([('type','checkbox')])
            } }
            . { with { dom-event
                ('change',on-change)
            } };

export function ui-select:
    &(Reactive[String], Array[(String,String)]) => Component
    &(@current, options) =>
        let on-change := { dom-event-handler
            (@current, &(ev) => (ev get-string 'webuiValue')) },
        let children := (options map &(name,desc) =>
            { dom-node ('option', desc) }
                . { with { dom-attrs [('value',name)] } }),
        & current := map { watch @current },
        { dom-node 'select' }
            . { with { dom-attrs [('value',current)] } }
            . { with { dom-event ('change',on-change) } }
            . { with { dom-children children } };

export function ui-button:
    &(String, Action) => Component
    &(text, action) =>
        let handler := { ui-callback { return action } },
        { static-component &() =>
            { dom-node ('button', text) }
                . { with { dom-event ('click',handler) } } };
