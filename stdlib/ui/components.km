type Component Computed[Node];  // Observable<VNode>

function StaticComponent:
    &(&() => Node) => Component
    native 'ui-static-component';

export function Empty:
    &() => Component
    &() => { StaticComponent &() =>
        { create-node 'div' }
            . { with { create-styles [('display','none')] } } };

export function Element:
    &(Tag, Array[Component]) => Component
    &(tag, children) =>
        if ((children.{length}) = 0):
            { StaticComponent &() => { create-node tag } },
        else:
            { create-computed-node (tag, children) };

export function Container:
    &(Array[Component]) => Component
    &(children) => { create-computed-node ('div', children) };

export function StyledContainer:
    &(Array[String]) => &(Array[Component]) => Component
    &(@class) => &(children) => { Container children }.{ with {Style @class} };

export function Label:
    &(String) => Component
    &(text) => { StaticComponent &() => { create-node ('div', text) } };

export function Label:
    &(Computed[String]) => Component
    &(@text) => { map (@text, (&(text) => { create-node ('div', text) })) };

export function Input:
    &(Reactive[String]) => Component
    &(@text) =>
        let on-input := { create-event-handler
            (@text, &(ev) => (ev get-string 'webuiValue')) },
        & text := map { watch @text },
        { create-node 'input' }
            . { with { create-attrs [('type','text'),('value',text)] } }
            . { with { create-events [('input',on-input)] } };

export function Checkbox:
    &(Reactive[Bool]) => Component
    &(@checked) =>
        let on-change := { create-event-handler
            (@checked, &(ev) => (ev get-bool 'webuiChecked')) },
        & checked := map { watch @checked },
        { create-node 'input' }
            . { with { create-attrs
                if checked:
                    ([('type','checkbox'), ('checked','checked')]),
                else:
                    ([('type','checkbox')])
            } }
            . { with { create-events
                [ ('change',on-change) ]
            } };

export function Select:
    &(Reactive[String], Array[(String,String)]) => Component
    &(@current, options) =>
        let on-change := { create-event-handler
            (@current, &(ev) => (ev get-string 'webuiValue')) },
        let children := (options map &(name,desc) =>
            { create-node ('option', desc) }
                . { with { create-attrs [('value',name)] } }),
        & current := map { watch @current },
        { create-node 'select' }
            . { with { create-attrs [('value',current)] } }
            . { with { create-events [('change',on-change)] } }
            . { with { create-content-children children } };

export function Button:
    &(String, Action) => Component
    &(text, action) =>
        let handler := { trigger action }.{convert}.[EventHandler],
        { StaticComponent &() =>
            { create-node ('button', text) }
                . { with { create-events [('click',handler)] } } };

export function ListView:[T]
    &(Tag, Reactive[List[T]], &(ListKey,Computed[Number],Reactive[T]) => Component) => Component
    &(tag, list, f) =>
        let children := (list consume &(item) => { f(item) }),
        { create-computed-node (tag, children) };

export function ListView:[T]
    &(Reactive[List[T]], &(ListKey,Computed[Number],Reactive[T]) => Component) => Component
    &(list, f) => { ListView ('div', list, f) };

