type Component Action*[Node]; // Observable<VNode>

public function ui-empty: ( &() Component )
    ( &(_)
        yield-thunk (&(_)(dom-node 'div' [('display','none')] []))
    );
public function ui-element: ( &(String,Array[Component]) Component )
    ( &(tag,children)
        if $((children.length) = 0):
            yield-thunk (&(_)(dom-node tag [])),
        else:
            dom-dynamic tag children
    );
public function ui-container: ( &(Array[Component]) Component )
    ( &(items)
        dom-dynamic 'div' items
    );
public function ui-label: ( &(String) Component )
    ( &(text)
        yield (dom-node 'div' text)
    );
public function ui-text: ( &(Action*[String]) Component )
    ( &(@text)
        ~ map &(text) := @text,
        dom-node 'div' text
    );
public function ui-text-input: ( &(Reactive[String]) Component )
    ( &(@text)
        let on-input := (dom-event-handler @text (&(ev)(ev.get-string 'webuiValue'))),
        ~ map &(text) := watch @text,
        dom-node 'input'
            (dom-styles [])
            (dom-attrs [ ('type', 'text'), ('value', text) ])
            (dom-event 'input' on-input)
            (dom-children [])
    );
public function ui-checkbox: ( &(Reactive[Bool]) Component )
    ( &(@checked)
        let on-change := (dom-event-handler @checked (&(ev)(ev.get-bool 'webuiChecked'))),
        ~ map &(checked) := watch @checked,
        dom-node 'input'
            (dom-styles [])
            (dom-attrs (
                if checked:
                    ([('type', 'checkbox'), ('checked', 'checked')]),
                else:
                    ([('type', 'checkbox')])
            ))
            (dom-event 'change' on-change)
            (dom-children [])
    );
public function ui-select: ( &(Reactive[String],Array[(String,String)]) Component )
    ( &(@current,options)
        let on-change := (dom-event-handler @current (&(ev)(ev.get-string 'webuiValue'))),
        ~ map &(current) := watch @current,
        dom-node 'select'
            (dom-styles [])
            (dom-attrs [('value', current)])
            (dom-event 'change' on-change)
            (dom-children (
                ~ map &(name,desc) := options,
                dom-node 'option' desc
                    | with (dom-attrs [('value', name)])
            ))
    );
public function ui-button: ( &(String, Action) Component )
    ( &(text,action)
        yield (dom-node 'button'
            (dom-styles [])
            (dom-attrs [])
            (dom-event 'click'
                (ui-callback (return action)))
            (dom-text text)
        )
    );
