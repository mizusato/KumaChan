type ServiceIdentifier[Instance,Argument,Constructor,Consumer]
    native;

type ServerBackend native;
type ClientBackend native;
export function ServerCleartext:
    & { network: String, addr: String } => ServerBackend
    native 'rpc-server-cleartext-net';
export function ClientCleartext:
    & { network: String, addr: String } => ClientBackend
    native 'rpc-client-cleartext-net';

type ServerOptions { common: CommonOptions };
type ClientOptions { common: CommonOptions };
type CommonOptions {
    log:    LogOptions,
    limits: LimitOptions
};
export const DefaultValue: CommonOptions := {};
type LogOptions {
    enabled: Bool
};
export const DefaultValue: LogOptions := { enabled: Yes };
type LimitOptions {
    send-timeout:      Number,
    recv-timeout:      Number,
    recv-interval:     Number,
    recv-max-obj-size: Number
};
export const DefaultValue: LimitOptions := {
    send-timeout:      10000,
    recv-timeout:      0,
    recv-interval:     100,
    recv-max-obj-size: 33554432
};

type Connection native;
export function close:
    &(Connection) => Action[unit]
    native 'rpc-connection-close';

export function serve:[Instance,Argument,Constructor,Consumer]
    & { service:     ServiceIdentifier[Instance,Argument,Constructor,Consumer],
        backend:     ServerBackend,
        options:     ServerOptions,
        constructor: Constructor }
             =>      Action[unit,Error]
    native 'rpc-serve';

export function access:[Instance,Argument,Constructor,Consumer]
    & { service:  ServiceIdentifier[Instance,Argument,Constructor,Consumer],
        backend:  ClientBackend,
        options:  ClientOptions,
        argument: Argument,
        consumer: Consumer }
            =>    Action[unit,Error]
    native 'rpc-access';
