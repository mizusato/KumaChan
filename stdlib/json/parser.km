type Parser[+T,+E]
    &(String) => Result[(T,String),(E,String)];
    // note: currently, the error type (E,String) is an ad-hoc implementation
    //       (fatal errors and non-fatal errors should be distinguished)

function make-lazy:[T,E]
    &(&() => Parser[T,E]) => Parser[T,E]
    &(thunk) => &(input) =>
        let parse := { thunk () },
        { parse input };

function output:[T,E]
    &(T) => Parser[T,E]
    &(value) => &(input) => { Success (value, input) };

function throw:[T,E]
    &(E) => Parser[T,E]
    &(err) => &(input) => { Failure (err, input) };

function consume:[E]
    &(String, E) => Parser[unit,E]
    &(target, err) => &(input) =>
        if (input.[String] has-prefix target):
            let input := (input substr-view (target.{length}, input.{length})),
            { Success ((), input) },
        else:
            { Failure (err, input) };

function with-ignored:[T,E]
    &(Parser[T,E], Parser[unit,E]) => Parser[T,E]
    &(parse-t, parse-blank) =>
        let parse-blanks: rec
            &(String) => String :=
            &(input) =>
                switch { parse-blank input }:
                case Success (_, input):
                    { parse-blanks input },
                case Failure _:
                    input,
                end,
        &(input) =>
            { parse-t { parse-blanks input } }
                . { map &(t, input) => (t, { parse-blanks input }) };

function map:[A,B,E]
    &(Parser[A,E], &(A) => B) => Parser[B,E]
    &(parse-a, a->b) => &(input) =>
        switch { parse-a input }:
        case Success (a, input):
            { Success ({ a->b a }, input) },
        case Failure err:
            { Failure err },
        end;

function apply:[T,R,E]
    &(Parser[T,E], &(T) => Parser[R,E]) => Parser[R,E]
    &(parse, k) => &(input) =>
        switch { parse input }:
        case Success (value, input):
            let parse-next := { k(value) },
            { parse-next input },
        case Failure err:
            { Failure err },
        end;

function choose:[T,E]
    &(Array[Parser[T,E]]) => Parser[T,E]
    &(parsers) =>
        let first := (parsers at! 0),
        let rest := (parsers slice-view (1, parsers.{length})),
        (rest reduce (first, &(parse-prev, parse-this) => &(input) =>
            switch { parse-prev input }:
            case Success parsed:
                { Success parsed },
            case Failure (prev-err, prev-remaining):
                switch { parse-this input }:
                case Success parsed:
                    { Success parsed },
                case Failure (this-err, this-remaining):
                    if (this-remaining.{length} < prev-remaining.{length}):
                        { Failure (this-err, this-remaining) },
                    else:
                        { Failure (prev-err, prev-remaining) },
                end,
            end
        ));

function repeat:[T,E]
    &(Parser[T,E]) => Parser[Array[T],E]
    &(item) => &(input) =>
        let proceed: rec
            &(String, Seq[T]) => Result[(Seq[T],String),(E,String)] :=
            &(input, seq) =>
                switch { item input }:
                case Success (value, input):
                    { proceed (input, (value cons seq)) },
                case Failure _:
                    { Success (seq, input) },
                end,
        { proceed (input, nil) }
            . { map &(seq, input) => (seq.{collect}.{reverse}, input) };

function repeat:[T,E]
    & { item: Parser[T,E], sep: Parser[unit,E] } => Parser[Array[T],E]
    & { item, sep } => &(input) =>
        let proceed: rec
            &(String, Seq[T]) => Result[(Seq[T],String),(E,String)] :=
            &(input, seq) =>
                switch { item input }:
                case Success (value, input):
                    let seq := (value cons seq),
                    switch { sep input }:
                    case Success (_, input):
                        { proceed (input, seq) },
                    case Failure _:
                        { Success (seq, input) },
                    end,
                case Failure err:
                    if seq.{is-nil}:
                        { Success (nil, input) },
                    else:
                        { Failure err },
                end,
        { proceed (input, nil) }
            . { map &(seq, input) => (seq.{collect}.{reverse}, input) };
