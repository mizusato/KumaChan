type Value enum {
    type Object  Map[String,Value];
    type Array   Array[Value];
    type Boolean Bool;
    type Number  Float;
    type String  String;
    type Null;
};

export function json-parse: (&(String)(Result[Self::Value,String]))
    (&(str)(parse str));

export function json-stringify: (&(Self::Value)(String))
    (& (jv)
        switch jv:
        case Self::Object (o):
            (o.iterate.map(&(key,value)(
                ("#:#" (quote key) (json-stringify value))
            )).join(',')."{#}"),
        case Self::Array (a):
            (a.iterate.map(json-stringify).join(',')."[#]"),
        case Self::Boolean (b):
            switch b:
                case Yes: 'true',
                case No:  'false',
            end,
        case Self::Number (n):
            (str n),
        case Self::String (s):
            (quote s),
        case Self::Null:
            ('null'),
        end
    );
