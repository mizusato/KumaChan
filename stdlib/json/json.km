type Value enum {
    type Object  Map[String,Value];
    type Array   Array[Value];
    type Boolean Bool;
    type Number  Float;
    type String  String;
    type Null;
};

// TODO: implement json parser using parser combinators

export function json-stringify:
    &(self::Value) => String
    &(v) =>
        switch v:
        case self::Object object:
            object
                . { iterate }
                . { map &(key,value) =>
                    { "#:#" ({quote key}, {json-stringify value}) } }
                . { join ',' }
                . { "{#}" },
        case self::Array array:
            array
                . { iterate }
                . { map json-stringify }
                . { join ',' }
                . { "[#]" },
        case self::Boolean boolean:
            switch boolean:
                case Yes: 'true',
                case No:  'false',
            end,
        case self::Number number:
            { str number },
        case self::String string:
            { quote string },
        case self::Null:
            'null',
        end;
