type ErrorKind enum {
    type EOF;
    type ClosedPipe;
    type UnknownError;
};

export function is:
    ( &(Error,ErrorKind) Bool )
    ( &(err, kind)
        select (err.kind!!, kind):
        case [EOF,EOF]:
            Yes,
        case [ClosedPipe,ClosedPipe]:
            Yes,
        default:
            No,
        end
    );
export function kind:
    ( &(Error) ErrorKind )
    ( &(err)
        if (err | is-eof):
            EOF,
        elif (err | is-closed-pipe):
            ClosedPipe,
        else:
            UnknownError
    );

function is-eof: ( &(Error) Bool )
    native 'is-eof';
function is-closed-pipe: ( &(Error)(Bool) )
    native 'is-closed-pipe';
