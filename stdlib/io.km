module I/O;

type InputStream   native;
type OutputStream  native;
type Error {
    kind: ErrorKind,
    message: String
};
type ErrorKind union {
    type *EndOfFile {};
    type *FileNotFound {};
    type *PermissionDenied {};
    // ...
};

global read := [&(InputStream, Int). Effect[Bytes,Error]]
    native 'read-input-stream';
global write := [&(OutputStream, Bytes). Effect[Int,Error]]
    native 'write-output-stream';

// print-line, ...
