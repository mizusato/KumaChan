type Component[Options]
    ( &(Options) NoExcept*[WebUi::Node] );

type Decorator[Options]
    ( &(Options,NoExcept*[WebUi::Node]) NoExcept*[WebUi::Node] );


public const Empty: NoExcept*[WebUi::Node]
    (yield ()).then(&(_)(yield (dom-node 'div' [('display','none')])));
    // note: create a new node each time (a node cannot be used more than once)

public const Static: Component[WebUi::Node]
    (&(node)(yield node));

public const Container: Component[Array[NoExcept*[WebUi::Node]]]
    (&(items)(dom-dynamic 'div' items));

public const List: Component[NoExcept*[Array[WebUi::Node]]]
    (&(items)(dom-dynamic 'div' items));

public const Text: Component[String]
    (&(text)(yield (dom-node 'div' text)));

public const TextSpace: Component[String]
    (&(text)(yield (dom-node 'div' [('visibility','hidden')] text)));

public const TextWatch: Component[NoExcept*[String]]
    ( &(@text)
        ~ map* &(text) := @text,
        dom-node 'div' text
    );

public const TextInput: Component[Reactive[String]]
    ( &(@text)
        ~ map* &(text) := watch @text,
        dom-node 'input'
            (dom-styles [])
            (dom-attrs [ ('type', 'text'), ('value', text) ])
            (dom-event 'input'
                (dom-event-sink @text (&(ev)(ev.get-string 'value'))))
            (dom-children [])
    );

public const Checkbox: Component[Reactive[Bool]]
    ( &(@checked)
        ~ map* &(checked) := watch @checked,
        dom-node 'input'
            (dom-styles [])
            (dom-attrs (
                if checked:
                    ([('type', 'checkbox'), ('checked', 'checked')]),
                else:
                    ([('type', 'checkbox')])
            ))
            (dom-event 'change'
                (dom-event-sink @checked (&(ev)(ev.get-bool 'checked'))))
            (dom-children [])
    );

public const Select: Component[(Reactive[String], Array[(String,String)])]
    ( &(@current, options)
        ~ map* &(current) := watch @current,
        dom-node 'select'
            (dom-styles [])
            (dom-attrs [('value', current)])
            (dom-event 'change'
                (dom-event-sink @current (&(ev)(ev.get-string 'value'))))
            (dom-children (
                ~ map &(name,desc) := options,
                dom-node 'option' {
                    attrs:   (dom-attrs [('value', name)]),
                    content: (dom-text desc)
                }
            ))
    );

public const Button: Component[(String, NoExcept[-])]
    ( &(text, action)
        yield (dom-node 'button'
            (dom-styles [])
            (dom-attrs [])
            (dom-event 'click'
                (dom-callback (&(_)(action))))
            (dom-text text)
        )
    );


public const Styled: Decorator[Array[String]]
    ( &(class-list, @node)
        ~ map* &(node) := @node,
        dom-node-with-attrs node (dom-attrs [
            ('class', (class-list.join ' '))
        ])
    );

public const DynStyled: Decorator[NoExcept*[Array[String]]]
    ( &(@class-list, @node)
        ~ map* &(class-list, node) := (combine-latest! @class-list @node),
        dom-node-with-attrs node (dom-attrs [
            ('class', (class-list.join ' '))
        ])
    );

public const WithEvents: Decorator[WebUi::Events]
    ( &(events, @node)
        ~ map* &(node) := @node,
        dom-node-with-events node events
    );

public const Focusable: Decorator[WebUi::Events]
    ( &(events, @node)
        ~ map* &(node) := @node,
        let node := dom-node-with-events node events,
        let node := dom-node-with-attrs node (dom-attrs [('tabindex','0')]),
        node
    );

public const DynEnabled: Decorator[NoExcept*[Bool]]
    ( &(@enabled, @node)
        ~ map* &(enabled, node) := (combine-latest! @enabled @node),
        if enabled:
            node,
        else:
            dom-node-with-attrs node
                (dom-attrs [('disabled', 'disabled')])
    );
