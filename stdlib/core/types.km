/**
 *  IMPORTANT: The following type definitions should be kept consistent
 *             with the `stdlib.go` file.
 */

// TODO: split this file

// Basic Sum Types
type Bool enum {
    type Yes;
    type No;
};
type Maybe[+T] enum {
    type Some[+T] weak T;
    type None;
};
type Result[+T,+E] enum {
    type Success[+T] weak T;
    type Failure[+E] weak E;
};
type Ordering enum {
    type <<;
    type ==;
    type >>;
};
export function =:
    &(Bool,Bool) => Bool
    native 'sum-index-equal';
export function =:
    &(Ordering,Ordering) => Bool
    native 'sum-index-equal';

type Optional[+T] Maybe[T];
export const DefaultValue: Optional[never] := None;

export function assume:[T]
    &((Bool,T), &() => T) => T
    &(input, k) =>
        let (cond, fallback) := input,
        if cond:
            { k () },
        else:
            fallback;

// ----------

export function map:[A,B,E]
    &(Result[A,E], &(A) => B) => Result[B,E]
    &(ra, f) =>
        switch ra:
        case Success a:
            { Success { f(a) } },
        case Failure err:
            { Failure err },
        end;

// ----------

// Functor(Maybe)
export function map:[A,B]
    &(Maybe[A], &(A) => B) => Maybe[B]
    &(v?, f) =>
        switch v?:
        case Some v:
            { Some { f v } },
        case None:
            None,
        end;

// Monad(Maybe)
export function get:[A,B]
    &(Maybe[A], &(A) => Maybe[B]) => Maybe[B]
    &(v?, k) =>
        switch v?:
        case Some v:
            { k v },
        case None:
            None,
        end;

// Applicative(Maybe)
export function Maybe:[A,B,T]
    &((Maybe[A],Maybe[B]), &(A,B) => T) => Maybe[T]
    &(pair, f) =>
        let (a?, b?) := pair,
        | a := get a?,
        | b := get b?,
        { Some { f(a,b) } };

export function Maybe:[A,B,C,T]
    &((Maybe[A],Maybe[B],Maybe[C]), &(A,B,C) => T) => Maybe[T]
    &(triple, f) =>
        let (a?, b?, c?) := triple,
        | a := get a?,
        | b := get b?,
        | c := get c?,
        { Some { f(a,b,c) } };

export function consume:[A,T]
    &((Maybe[A],T), &(A) => T) => T
    &(input, f) =>
        let (v?, fallback) := input,
        switch v?:
        case Some v:
            { f(v) },
        case None:
            fallback,
        end;

export function ??:[T]
    &(Maybe[T], T) => T
    &(t?, fallback) =>
        switch t?:
        case Some t:
            t,
        case None:
            fallback,
        end;

export function Bool:[T]
    &(Maybe[T]) => Bool
    &(t?) =>
        switch t?:
        case Some _:
            Yes,
        case None:
            No,
        end;
