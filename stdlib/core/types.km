/**
 *  IMPORTANT: The following type definitions should be kept consistent
 *             with the `stdlib.go` file.
 */

// Basic Numeric Types
type Float   native;  // float64 except NaN and Infinity values
type Number  native;  // uint (size_t), with overflow/underflow checking
type Int8    native;  // int8
type Int16   native;  // int16
type Int32   native;  // int32
type Int64   native;  // int64
type Uint8   native;  // uint8
type Uint16  native;  // uint16
type Uint32  native;  // uint32
type Uint64  native;  // uint64

// Basic Sum Types
type Bool union {
    type Yes;
    type No;
};
type Maybe[+T] union {
    type Just[+T] as T;
    type N/A;
};
type Result[+T,+E] union {
    type OK[+T] as T;
    type NG[+E] as E;
};
type Ordering union {
    type <<;
    type ==;
    type >>;
};

public function maybe[A,B]:  ( &(Maybe[A],(&(A)(B))) Maybe[B] )
    ( &(v?, f)
        switch v?:
        case Just v:
            Just (f v),
        case N/A:
            N/A,
        end
    );

public function maybe?[A,B]: ( &(Maybe[A],(&(A)(Maybe[B]))) Maybe[B] )
    ( &(v?, k)
        switch v?:
        case Just v:
            (k v),
        case N/A:
            N/A,
        end
    );

public function unwrap?[T]: ( &(Maybe[Maybe[T]]) Maybe[T] )
    ( &(v??)
        switch v??:
        case Just v?:
            switch v?:
            case Just v:
                Just v,
            case N/A:
                N/A,
            end,
        case N/A:
            N/A,
        end
    );
