// Container Types
type Seq[T]    native;  // container.Seq
type Array[T]  native;  // []T, container.Array
type Heap[T]   native;  // container.Heap
type Set[T]    native;  // container.Set
type Map[K,V]  native;  // container.Map


/* Functions for Seq[T] */

public function collect[T]: ( &(Seq[T]) Array[T] )
    native 'seq-collect';

public function next[T]: ( &(Seq[T]) Maybe[(T,Seq[T])] )
    native 'seq-next';
public function nil[T]:  ( &() Seq[T] )
    native 'seq-nil';
public function cons[T]: ( &(T,Seq[T]) Seq[T] )
    native 'seq-cons';

public function map[A,B]:  ( &(Seq[A],(&(A)(B))) Seq[B] )
    native 'seq-map';
public function filter[T]: ( &(Seq[T],(&(T)(Bool))) Seq[T] )
    native 'seq-filter';

public function scan[T,A]:   ( &(Seq[T],A,(&(A,T)(A))) Seq[A] )
    native 'seq-scan';
public function reduce[T,A]: ( &(Seq[T],A,(&(A,T)(A))) A )
    native 'seq-reduce';

public function some[T]:  ( &(Seq[T],(&(T)(Bool))) Bool )
    native 'seq-some';
public function every[T]: ( &(Seq[T],(&(T)(Bool))) Bool )
    native 'seq-every';


/* Functions of Array[T] */

public function iterate[T]: ( &(Array[T]) Seq[T] )
    native 'array-iterate';

public function get[T]: ( &(Array[T],Number) T )  // TODO: --> Maybe[T]
    native 'array-get';
public function length[T]: ( &(Array[T]) Number )
    native 'array-length';

public function reverse[T]: ( &(Array[T]) Array[T] )
    native 'array-reverse';

public function slice[T]:      ( &(Array[T],Range) Array[T] )
    native 'array-slice';
public function slice-view[T]: ( &(Array[T], Range) Array[T] )
    native 'array-slice-view';

public function map[A,B]:      ( &(Array[A],(&(A)(B))) Array[B] )
    native 'array-map';
public function map-view[A,B]: ( &(Array[A],(&(A)(B))) Array[B] )
    native 'array-map-view';

public function filter[T]: ( &(Array[T],(&(T)(Bool))) Array[T] )
    ( &(arr,f) (arr | iterate | filter f | collect) );

public function scan[T,A]:   ( &(Array[T],A,(&(A,T)(A))) Array[A] )
    ( &(arr,init,f) (arr | iterate | scan init f | collect) );
public function reduce[T,A]: ( &(Array[T],A,(&(A,T)(A))) A )
    ( &(arr,init,f) (arr | iterate | reduce init f) );

public function some[T]:  ( &(Array[T],(&(T)(Bool))) Bool )
    ( &(arr,f) (arr | iterate | some f) );
public function every[T]: ( &(Array[T],(&(T)(Bool))) Bool )
    ( &(arr,f) (arr | iterate | every f) );


/* Functions of Map[K,V] */

public function new-map[T]: ( &(Array[(String,T)]) Map[String,T] )
    native 'new-map-str';
public function entries[K,V]: ( &(Map[K,V]) Array[(K,V)] )
    native 'map-entries';
public function iterate[K,V]: ( &(Map[K,V]) Seq[(K,V)] )
    ( &(m) (m.entries.iterate) );
