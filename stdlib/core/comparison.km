export function is:[T]
    &(T,T) => Bool
    native 'is';

type Eq[T] implicit {
    = : &(T,T) => Bool
};

type Ord[T] implicit {
    < : &(T,T) => Bool
};

export function !=:
    [T] (Eq[T]) 
    &(T,T) => Bool
    &(a,b) => { not (a = b) };

export function >:
    [T] (Ord[T])
    &(T,T) => Bool
    &(a,b) => (b < a);

export function <=:
    [T] (Ord[T])
    &(T,T) => Bool
    &(a,b) => { not (b < a) };

export function >=:
    [T] (Ord[T])
    &(T,T) => Bool
    &(a,b) => { not (a < b) };

export function min:
    [T] (Ord[T])
    &(T,T) => T
    &(a,b) => (if (a < b): a, else: b);

export function max:
    [T] (Ord[T])
    &(T,T) => T
    &(a,b) => (if (b < a): a, else: b);

