type Char    protected Uint32;  // container.Char (uint32)
type String  protected Array[Char];  // container.String ([] uint32)

public function  = :(&(String,String)(Bool))      native '=String';
public function  < :(&(String,String)(Bool))      native '<String';
public function <> :(&(String,String)(Ordering))  native '<>String';

public function str[T]: implicit[Cast[T,String]] (&(T)(String))
    (&(x)(from x));
public function from: (&(Array[Char])(String))  native 'String from Array';
public function from: (&(Char)(String))         native 'String from Char';
public function from: (&(Number)(String))       native 'String from Number';
public function from: (&(Float)(String))        native 'String from Float';
public function from: (&(Float*)(String))
    ( &(x*)
        switch (check-nan-inf x*):
            case Just x: (:String: from x),
            case N/A:    'INVALID',
        end
    );

// encodes string into UTF-8 byte sequence
public function encode:  (&(String)(Bytes))         native 'encode-utf8';
// decodes string from UTF-8 byte sequence
public function decode:  (&(Bytes)(Maybe[String]))  native 'decode-utf8';
// decodes string from UTF-8 byte sequence (outputs \uFFFD on errors)
public function decode!: (&(Bytes)(String))         native 'force-decode-utf8';

public function quote:   (&(String)(String))         native 'quote';
public function unquote: (&(String)(Maybe[String]))  native 'unquote';

// TODO: parse-int
public function parse-float: (&(String)(Maybe[Float]))  native 'parse-float';

public function or: (&(String,String)(String))
    ( &(str, fallback) (if $(str = ''): fallback, else: str ) );

public function substr: (&(String,Range)(String))
    ( &(str,range) (String (str.slice range)) );

public function find: (&(String,String)(Maybe[Number]))  native 'str-find';
public function contains: (&(String,String)(Bool))
    ( &(str,sub)
        switch (str.find sub):
            case Just _: Yes,
            case N/A:    No,
        end
    );
public function contains: (&(String,Char)(Bool))
    ( &(str,char)(str.some (&(c) $(c = char))) );

public function concat: (&(Array[String])(String))      native 'str-concat';
public function split:  (&(String,String)(Seq[String])) native 'str-split';
public function join:   (&(Seq[String],String)(String)) native 'str-join';
public function join:   (&(Seq[String],Char)(String))
    (&(seq,char)(seq.join (String [char])));
public function join:   (&(Array[String],String)(String))
    (&(arr,sep)(arr.iterate.join sep));
public function join:   (&(Array[String],Char)(String))
    (&(arr,char)(arr.iterate.join char));

public function trim: (&(String,Char)(String))
    native 'trim';
public function trim-left: (&(String,Char)(String))
    native 'trim-left';
public function trim-right: (&(String,Char)(String))
    native 'trim-right';
public function trim-prefix: (&(String,String)(String))
    native 'trim-prefix';
public function trim-suffix: (&(String,String)(String))
    native 'trim-suffix';
