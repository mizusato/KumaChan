module OS;

public const Kind := [String] native 'OS::Kind';
public const Arch := [String] native 'OS::Arch';
public const Is64Bit := [Bool] native 'OS::Is64Bit';

public const Env := [Map[String,String]] native 'OS::Env';

public const  Stdin := [I/O::InputStream]  native 'OS::Stdin';
public const Stdout := [I/O::OutputStream] native 'OS::Stdout';
public const Stderr := [I/O::OutputStream] native 'OS::Stderr';

public macro println(line) := (OS::Stdout | write-line line);

type Path  protected Array[String];

private function validate-raw-path {
    lambda Array[String] Array[String]:
    lambda raw
        if (raw.some &(part)(part.contains '/')):
            panic 'invalid path',
        else:
            raw
};

public function rel-path! {
    lambda Array[String] Path:
    lambda raw
        let validated := (validate-raw-path raw),
        return (Path (collect cons ('.', iterate validated)))
};

type ProcessExit  protected NoExcept[-];
public function exit {
    lambda Uint8 ProcessExit:
    native 'exit'
};
